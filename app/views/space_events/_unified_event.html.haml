-# Locals
-#  event (MwebEvents::Event)

.thread{:class => "#{cycle("thread-even" , "thread-odd")}", :id => "parent_event_#{event.id}"}

  .logo-in-thread
    = event_logo_link(event, :title => sanitize(event.name), :class => "logo logo-event")

  .thread-content

    %ul.thread-action-links.visible-on-hover{ :"data-hover-tracked" => "parent_event_#{event.id}" }
      - if can?(:update, event)
        %li= link_to t('edit').downcase, mweb_events.edit_event_path(event), { :name => event.id, :title => t('edit') }
      - if can?(:destroy, event)
        %li= link_to t('remove').downcase, mweb_events.event_path(event), { :method => :delete, :title => t('delete.one'), :confirm => t('delete.confirm', :element => event.name) }

    .thread-title
      = icon_event t('.event_in_the_space', :space => event.owner.name)
      = link_to sanitize(event.name), mweb_events.event_path(event)
      %span.thread-updated-at= t('updated_time_ago', :time => sanitize(time_ago_in_words(event.updated_at)))

    .thread-text
      .event-description-date
        = t('.starts_at') + ':'
        = event.get_formatted_date
      .event-description-date
        = t('.ends_at') + ':'
        = event.get_formatted_date(event.end_on)
      - unless event.address.blank?
        .event-description-location
          = t('.where') + ':'
          = sanitize(event.address)
      -# TODO: event organizers
      -# .event-description-organizer
      -#   = t('.organizers') + ':'
      -#   - orgs = []
      -#   - event.organizers.each do |org|
      -#     - orgs.push link_to org.name, user_path(org)
      -#   = orgs.join(', ').html_safe
